name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22.x']
        platform: [linux-amd64, windows-amd64, darwin-amd64, darwin-arm64]
        include:
          - platform: linux-amd64
            os: ubuntu-latest
            GOOS: linux
            GOARCH: amd64
            binary_name: DatabricksMCP
            asset_name: databricks-mcp-linux-amd64
          - platform: windows-amd64
            os: ubuntu-latest
            GOOS: windows
            GOARCH: amd64
            binary_name: DatabricksMCP.exe
            asset_name: databricks-mcp-windows-amd64.exe
          - platform: darwin-amd64
            os: ubuntu-latest
            GOOS: darwin
            GOARCH: amd64
            binary_name: DatabricksMCP
            asset_name: databricks-mcp-darwin-amd64
          - platform: darwin-arm64
            os: ubuntu-latest
            GOOS: darwin
            GOARCH: arm64
            binary_name: DatabricksMCP
            asset_name: databricks-mcp-darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")-dev-$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build
      env:
        GOOS: ${{ matrix.GOOS }}
        GOARCH: ${{ matrix.GOARCH }}
      run: |
        go build -ldflags "-X 'main.Version=${{ env.VERSION }}' -X 'main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'main.GitCommit=$(git rev-parse --short HEAD)'" -o ${{ matrix.binary_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/databricks-mcp-linux-amd64/DatabricksMCP
            artifacts/databricks-mcp-windows-amd64.exe/DatabricksMCP.exe
            artifacts/databricks-mcp-darwin-amd64/DatabricksMCP
            artifacts/databricks-mcp-darwin-arm64/DatabricksMCP
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
